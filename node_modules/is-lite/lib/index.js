"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isObject = function (value) { return typeof value === 'object'; };
exports.getObjectType = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
};
var isObjectOfType = function (value, type) {
    return exports.getObjectType(value) === type;
};
exports.default = {
    array: Array.isArray,
    boolean: function (value) {
        return value === true || value === false;
    },
    date: function (value) {
        return isObjectOfType(value, 'Date');
    },
    domElement: function (value) {
        var DOM_PROPERTIES_TO_CHECK = [
            'innerHTML',
            'ownerDocument',
            'style',
            'attributes',
            'nodeValue',
        ];
        return (this.object(value) &&
            !this.plainObject(value) &&
            value.nodeType === 1 &&
            this.string(value.nodeName) &&
            DOM_PROPERTIES_TO_CHECK.every(function (property) { return property in value; }));
    },
    function: function (value) {
        return typeof value === 'function';
    },
    generator: function (value) {
        return (this.iterable(value) &&
            this.function(value.next) &&
            this.function(value.throw));
    },
    iterable: function (value) {
        return (!this.nullOrUndefined(value) && this.function(value[Symbol.iterator]));
    },
    map: function (value) {
        return isObjectOfType(value, 'Map');
    },
    nan: function (value) {
        return Number.isNaN(value);
    },
    null: function (value) {
        return value === null;
    },
    nullOrUndefined: function (value) {
        return this.null(value) || this.undefined(value);
    },
    number: function (value) {
        return typeof value === 'number';
    },
    numericString: function (value) {
        return (typeof value === 'string' &&
            value.length > 0 &&
            !Number.isNaN(Number(value)));
    },
    object: function (value) {
        return (!this.nullOrUndefined(value) && (this.function(value) || isObject(value)));
    },
    plainObject: function (value) {
        var prototype;
        return (isObjectOfType(value, 'Object') &&
            ((prototype = Object.getPrototypeOf(value)),
                prototype === null || prototype === Object.getPrototypeOf({})));
    },
    promise: function (value) {
        return isObjectOfType(value, 'Promise');
    },
    regexp: function (value) {
        return isObjectOfType(value, 'RegExp');
    },
    set: function (value) {
        return isObjectOfType(value, 'Set');
    },
    string: function (value) {
        return typeof value === 'string';
    },
    symbol: function (value) {
        return isObjectOfType(value, 'Symbol');
    },
    undefined: function (value) {
        return typeof value === 'undefined';
    },
    weakMap: function (value) {
        return isObjectOfType(value, 'WeakMap');
    },
    weakSet: function (value) {
        return isObjectOfType(value, 'WeakSet');
    },
};
